environment:
    DEB_BUILD_OPTIONS: "parallel=$( nproc ) noopt ${NOCHECK}"
    NO_PKG_MANGLE: 1

systems: [ubuntu-*]

summary: Build Ubuntu packages

execute: |
    if [[ "$SPREAD_SYSTEM" == *-proposed-* ]]; then
        if [[ "amd64 i386" == *$( dpkg-architecture --query DEB_HOST_ARCH )* ]]; then
            add-apt-repository --yes --no-update \
              "deb http://archive.ubuntu.com/ubuntu/ $( lsb_release --short --codename )-proposed restricted main multiverse universe"
        else
            add-apt-repository --yes --no-update \
              "deb http://ports.ubuntu.com/ubuntu-ports/ $( lsb_release --short --codename )-proposed restricted main multiverse universe"
        fi
    fi

    # Get any out-of-archive dependencies
    # (Currently just libnvidia-egl-wayland-dev)
    for repo in ppa:mir-team/{release,dev}; do
        add-apt-repository --yes --update ${repo} || add-apt-repository --yes --remove ${repo}
    done

    apt-get update

    # to get dpkg-architecture and mk-build-deps
    apt-get install \
      --yes \
      --no-install-recommends \
      devscripts \
      dpkg-dev \
      equivs

    # set host and build environment up
    source <( dpkg-architecture --print-set --host-arch ${ARCH} )

    # if cross-building
    if [ "${DEB_BUILD_ARCH}" != "${DEB_HOST_ARCH}" ]; then
        # add host architecture
        dpkg --add-architecture "${DEB_HOST_ARCH}"

        # don't run tests
        DEB_BUILD_OPTIONS="${DEB_BUILD_OPTIONS} nocheck"

        # limit existing apt sources to build architecture
        sed -i "s/^deb \(\[arch=.*\] \)\?/deb [arch=${DEB_BUILD_ARCH}] /" \
          /etc/apt/sources.list

        case "${DEB_HOST_ARCH}" in
          amd64|i386)
            ARCHIVE_URL="http://archive.ubuntu.com/ubuntu"
            ;;
          *)
            ARCHIVE_URL="http://ports.ubuntu.com/ubuntu-ports"
            ;;
        esac

        # add host architecture apt sources
        printf "deb [arch=${DEB_HOST_ARCH}] ${ARCHIVE_URL} \
          %s main multiverse universe restricted\n" \
          $(lsb_release -sc){,-security,-updates} \
        > /etc/apt/sources.list.d/cross-${DEB_HOST_ARCH}.list

        apt-get update

        if [ "$(lsb_release -cs)" == "xenial" ]; then
          # workaround for 16.04 passing invalid compiler names (LP#1728673)
          apt-get --yes install debhelper/xenial-backports
        fi
    fi

    cd $SPREAD_PATH

    # Mark the "release" in the changelog
    debchange --release "CI release"

    # install dependencies
    mk-build-deps \
      --install \
      --tool "apt-get --yes -o Debug::pkgProblemResolver=yes"

    # use clang
    if [ "${CLANG}" -eq 1 ]; then
      apt-get install --yes --no-install-recommends clang
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_C_COMPILER=clang" >> debian/opts.mk
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_CXX_COMPILER=clang++" >> debian/opts.mk
    fi

    # enable valgrind
    if [ "${VALGRIND}" -eq 1 ]; then
      echo "OVERRIDE_CONFIGURE_OPTIONS += -DENABLE_MEMCHECK_OPTION=ON" >> debian/opts.mk
    fi

    # change the build type
    echo "OVERRIDE_CONFIGURE_OPTIONS += -DCMAKE_BUILD_TYPE=${BUILD_TYPE}" >> debian/opts.mk

    # build and run tests
    debian/rules build
